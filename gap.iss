; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "GAP"


#ifndef GapVersion
  #error GapVersion must be defined--pass /DGapVersion=<version> to InnoSetup with the correct version
#endif

#ifndef InstallerVersion
  #error InstallerVersion must be defined--pass /DInstallerVersion=<version> to InnoSetup with the correct version
#endif

#ifndef GapName
  #error GapName must be defined--pass /DGapName=<name> to InnoSetup with the correct version
#endif


#ifndef GapArch
  #define GapArch "x86_64"
#endif

#if GapArch == "x86_64"
  #define MyArchitecturesAllowed "x64"
#else
  #define MyArchitecturesAllowed "x86 x64"
#endif


#define MyAppVersion GapVersion
#define MyAppPublisher "The GAP Group"
#define MyAppURL "https://www.gap-system.org"
#define MyAppExeName "gap-mintty.bat"


#define GapGroupName MyAppName + "-" + MyAppVersion

#ifndef EnvsDir
  #define EnvsDir "envs"
#endif

#ifndef OutputDir
  #define OutputDir "dist"
#endif

#define Source      EnvsDir + "\runtime-" + GapVersion + "-" + GapArch

#define Runtime     "{app}\runtime"
#define Bin         Runtime + "\bin"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={#MyAppName}-{#MyAppVersion}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
ArchitecturesAllowed={#MyArchitecturesAllowed}
ArchitecturesInstallIn64BitMode=x64
ChangesEnvironment=true
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputBaseFilename=gap-{#MyAppVersion}-{#GapArch}
Compression=lzma2
LZMANumBlockThreads=6
SolidCompression=yes
WizardStyle=modern
LicenseFile="{#Source}\opt\gap-{#MyAppVersion}\LICENSE"

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "gap_resources\gap.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "gap_resources\gap-mintty.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#Source}\*"; DestDir: "{#Runtime}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#Source}\gapicon.ico"; DestDir: "{app}"; Flags: ignoreversion; AfterInstall: PostInstall;

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

; InnoSetup will not create empty directories found when including files
; recursively in the [Files] section, so any directories that must exist
; (but start out empty) in the cygwin distribution must be created
;
; /etc/fstab.d is where user-specific mount tables go
;
; /dev/shm and /dev/mqueue are used by the system for POSIX semaphores, shared
; memory, and message queues and must be created world-writeable
[Dirs]
Name: "{#Runtime}\etc\fstab.d"; Permissions: users-modify
Name: "{#Runtime}\dev\shm"; Permissions: users-modify
Name: "{#Runtime}\dev\mqueue"; Permissions: users-modify
; Name: "{#Runtime}\home\sage"; Permissions: users-modify

[Icons]
Name: "{autoprograms}\{#MyAppName}-{#GapVersion}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\gapicon.ico"
Name: "{autodesktop}\{#MyAppName}-{#GapVersion}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\gapicon.ico" ; Tasks: desktopicon


[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: shellexec postinstall skipifsilent

[UninstallDelete]
Type: filesandordirs; Name: "{app}"

[Code]
var
    UserInstall: Boolean;
    InstallModeSelectPageID: Integer;

// This function is used above in the [Icons] section to get the correct
// installation path for desktop icons depending on what installation mode
// was selected
function GetDesktopPath(Param: String): String;
begin
    if UserInstall then
    begin
        Result := ExpandConstant('{userdesktop}');
    end
    else begin
        Result := ExpandConstant('{commondesktop}');
    end;
end;

// ******************* Custom Install Wizard Pages ***************************


function ProcessInstallModeSelectPage(Page: TWizardPage): Boolean;
begin
    if TInputOptionWizardPage(Page).CheckListBox.Checked[0] then
    begin
        WizardForm.DirEdit.Text := ExpandConstant('{localappdata}\{#GapGroupName}');
        UserInstall := True;
    end
    else begin
        WizardForm.DirEdit.Text := ExpandConstant('{pf}\{#GapGroupName}');
        UserInstall := False;
    end;

    Result := True;
end;


procedure CreateInstallModeSelectPage();
var
    Page: TInputOptionWizardPage;
begin
    Page := CreateInputOptionPage(wpUserInfo, 'Install Mode Select',
    'Install either for a single user or for all users on the system (requires Administrator privileges).', '', True, False);
    InstallModeSelectPageID := Page.ID;

    Page.Add('Install just for the current user');
    Page.Add('Install for all users (installer must be run with Administrator privileges)');

    UserInstall := Boolean(
        StrToInt(
            GetPreviousData('UserInstall', IntToStr(Integer(not IsAdminLoggedOn())))));

    with Page do
    begin
        CheckListBox.Checked[0] := UserInstall;
        CheckListBox.Checked[1] := (not UserInstall);
        CheckListBox.ItemEnabled[1] := IsAdminLoggedOn();
        OnNextButtonClick := @ProcessInstallModeSelectPage;
    end;
end;

procedure InitializeWizard();
begin
    UserInstall := not IsAdminLoggedOn();
    CreateInstallModeSelectPage();
end;


// Symlinks from the Cygwin runtime are stored in the .lnk file format
// which is one of the different ways of storing symlinks supported by Cygwin;
// for this to work they must have the READ ONLY attribute set on them.
// When the files are compressed by InnoSetup they lose this attribute, so
// we must have a list of files that are supposed to by symlinks, which is
// created by the Makefile as <runtime-env>/etc/symlinks.lst and included in
// the installer.  This procedure loops over all the files in this list and
// applies the READ ONLY attribute to them so they can once again be recognized
// by Cygwin as symlinks.
procedure FixupSymlinks();
var
    n: Integer;
    i: Integer;
    resultCode: Integer;
    filenames: TArrayOfString;
    filenam: String;
begin
    LoadStringsFromFile(ExpandConstant('{#Runtime}\etc\symlinks.lst'), filenames);
    n := GetArrayLength(filenames);
    WizardForm.ProgressGauge.Min := 0;
    WizardForm.ProgressGauge.Max := n - 1;
    WizardForm.ProgressGauge.Position := 0;
    WizardForm.StatusLabel.Caption := 'Fixing up symlinks...';
    for i := 0 to n - 1 do
    begin
        filenam := filenames[i] + '.lnk';
        WizardForm.FilenameLabel.Caption := Copy(filenam, 2, Length(filenam));
        WizardForm.ProgressGauge.Position := i;
        Exec(ExpandConstant('{sys}\attrib.exe'), '+R ' + filenam,
             ExpandConstant('{#Runtime}'), SW_HIDE, ewNoWait, resultCode);
    end;
end;



procedure PostInstall();
begin
    FixupSymlinks();
end;
